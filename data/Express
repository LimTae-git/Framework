Skip to main content
Select language
Skip to search

Technologies▼
References & Guides▼
Feedback▼

Search MDN

Sign in
Express web framework (Node.js/JavaScript)
Learn web developmentServer-side website programmingExpress web framework (Node.js/JavaScript)
English
▼
On this Page
Prerequisites
Guides
See also
Adding more tutorials
Express is a popular unopinionated web framework, written in JavaScript and hosted within the Node.js runtime environment. The module explains some of the key benefits of this framework, how to set up your development environment and how to perform common web development and deployment tasks.
Prerequisites
Before starting this module you will need to understand what server-side web programming and web frameworks are, ideally by reading the topics in our Server-side website programming first steps module. A general knowledge of programming concepts and JavaScript is highly recommended, but not essential to understanding the core concepts.
Note: This website has many useful resources for learning JavaScript in the context of client-side development: JavaScript, JavaScript Guide, JavaScript Basics, JavaScript (learning). The core JavaScript language and concepts are the same for server-side development on Node.js and this material will be relevant. Node.js offers additional APIs for supporting functionality that is useful in browserless environments (e.g., to create HTTP servers and access the file system but does not support JavaScript APIs for working with the browser and DOM).
This guide will provide some information about working with Node.js and Express, and there are numerous other excellent resources on the Internet and in books — some of these linked from How do I get started with Node.js (StackOverflow) and What are the best resources for learning Node.js? (Quora).
Guides
Express/Node introduction
In this first Express article we answer the questions "What is Node?" and "What is Express?" and give you an overview of what makes the Express web framework special. We'll outline the main features and show you some of the main building blocks of an Express application (although at this point you won't yet have a development environment in which to test it).
Setting up a Node (Express) development environment
Now that you know what Express is for, we'll show you how to set up and test a Node/Express development environment on Windows, Linux (Ubuntu), and Mac OS X. Whatever common operating system you are using, this article should give you what you need to be able to start developing Express apps.
Express Tutorial: The Local Library website
The first article in our practical tutorial series explains what you'll learn and provides an overview of the "local library" example website we'll be working through and evolving in subsequent articles.
Express Tutorial Part 2: Creating a skeleton website
This article shows how you can create a "skeleton" website project, which you can then go on to populate with site-specific routes, templates/views, and databases.
Express Tutorial Part 3: Using a Database (with Mongoose)
This article briefly introduces databases for Node/Express. It then goes on to show how we can use Mongoose to provide database access for the LocalLibrary website. It explains how object schema and models are declared, the main field types, and basic validation. It also briefly shows a few of the main ways you can access model data.
Express Tutorial Part 4: Routes and controllers
In this tutorial we'll set up routes (URL handling code) with "dummy" handler functions for all the resource endpoints that we'll eventually need in the LocalLibrary website. On completion, we'll have a modular structure for our route handling code, that we can extend with real handler functions in the following articles. We'll also have a really good understanding of how to create modular routes using Express.
Express Tutorial Part 5: Displaying library data
We're now ready to add the pages that display the LocalLibrary website books and other data. The pages will include a home page that shows how many records we have of each model type and list and detail pages for all of our models. Along the way, we'll gain practical experience in getting records from the database and using templates.
Express Tutorial Part 6: Working with forms
In this tutorial we'll show you how to work with HTML Forms in Express, using Pug, and in particular how to write forms to create, update, and delete documents from the database.
Express Tutorial Part 7: Deploying to production
Now you've created an awesome LocalLibrary website, you're going to want to install it on a public web server so that it can be accessed by library staff and members over the Internet. This article provides an overview of how you might go about finding a host to deploy your website, and what you need to do in order to get your site ready for production.
See also
Installing LocalLibrary on PWS/Cloud Foundry
This article provides a practical demonstration of how to install LocalLibrary on the Pivotal Web Services PaaS cloud — this is a full-featured, open source alternative to Heroku, the PaaS cloud service used in Part 7 of the tutorial, listed above. PWS/Cloud Foundry is definitely worth checking out if you are looking for an alternative to Heroku (or another PaaS cloud service), or simply feel like trying something different. 
Adding more tutorials
That's the end of the tutorial articles (for now). If you would like to extend it, other interesting topics to cover are:
Using sessions.
User authentication.
User authorization and permissions.
Testing an Express web application.
Web security for Express web applications.
And of course, it would be excellent to have an assessment task!

Last modified:
Sep 19, 2019, by MDN contributors
Related Topics
Complete beginners start here!
Getting started with the Web 
Getting started with the Web overview
Installing basic software
What will your website look like?
Dealing with files
HTML basics
CSS basics
JavaScript basics
Publishing your website
How the Web works
HTML — Structuring the Web
Introduction to HTML 
Introduction to HTML overview
Getting started with HTML
What's in the head? Metadata in HTML
HTML text fundamentals
Creating hyperlinks
Advanced text formatting
Document and website structure
Debugging HTML
Assessment: Marking up a letter
Assessment: Structuring a page of content
Multimedia and embedding 
Multimedia and embedding overview
Images in HTML
Video and audio content
From object to iframe — other embedding technologies
Adding vector graphics to the Web
Responsive images
Assessment: Mozilla splash page
HTML tables 
HTML tables overview
HTML table basics
HTML Table advanced features and accessibility
Assessment: Structuring planet data
HTML forms 
HTML forms overview
Your first HTML form
How to structure an HTML form
The native form widgets
Sending form data
Form validation
How to build custom form widgets
Sending forms through JavaScript
HTML forms in legacy browsers
Styling HTML forms
Advanced styling for HTML forms
Property compatibility table for form widgets
CSS — Styling the Web
CSS first steps 
CSS first steps overview
What is CSS?
Getting started with CSS
How CSS is structured
How CSS works
Using your new knowledge
CSS building blocks 
CSS building blocks overview
Cascade and inheritance
CSS selectors
The box model
Backgrounds and borders
Handling different text directions
Overflowing content
Values and units
Sizing items in CSS
Images, media, and form elements
Styling tables
Debugging CSS
Organizing your CSS
Styling text 
Styling text overview
Fundamental text and font styling
Styling lists
Styling links
Web fonts
Assessment: Typesetting a community school homepage
CSS layout 
CSS layout overview
Introduction
Normal Flow
Flexbox
Grids
Floats
Positioning
Multiple-column Layout
Responsive design
Beginner's guide to media queries
Legacy Layout Methods
Supporting Older Browsers
Fundamental Layout Comprehension
JavaScript — Dynamic client-side scripting
JavaScript first steps 
JavaScript first steps overview
What is JavaScript?
A first splash into JavaScript
What went wrong? Troubleshooting JavaScript
Storing the information you need — Variables
Basic math in JavaScript — Numbers and operators
Handling text — Strings in JavaScript
Useful string methods
Arrays
Assessment: Silly story generator
JavaScript building blocks 
JavaScript building blocks overview
Making decisions in your code — Conditionals
Looping code
Functions — Reusable blocks of code
Build your own function
Function return values
Introduction to events
Assessment: Image gallery
Introducing JavaScript objects 
Introducing JavaScript objects overview
Object basics
Object-oriented JavaScript for beginners
Object prototypes
Inheritance in JavaScript
Working with JSON data
Object building practice
Assessment: Adding features to our bouncing balls demo
Asynchronous JavaScript 
Asynchronous JavaScript overview
General asynchronous programming concepts
Introducing asynchronous JavaScript
Cooperative asynchronous Java​Script: Timeouts and intervals
Graceful asynchronous programming with Promises
Making asynchronous programming easier with async and await
Choosing the right approach
Client-side web APIs 
Client-side web APIs
Introduction to web APIs
Manipulating documents
Fetching data from the server
Third party APIs
Drawing graphics
Video and audio APIs
Client-side storage
Accessibility — Make the web usable by everyone
Accessibility guides 
Accessibility overview
What is accessibility?
HTML: A good basis for accessibility
CSS and JavaScript accessibility best practices
WAI-ARIA basics
Accessible multimedia
Mobile accessibility
Accessibility assessment 
Assessment: Accessibility troubleshooting
Tools and testing
Cross browser testing 
Cross browser testing overview
Introduction to cross browser testing
Strategies for carrying out testing
Handling common HTML and CSS problems
Handling common JavaScript problems
Handling common accessibility problems
Implementing feature detection
Introduction to automated testing
Setting up your own test automation environment
Server-side website programming
First steps 
First steps overview
Introduction to the server-side
Client-Server overview
Server-side web frameworks
Website security
Django web framework (Python) 
Django web framework (Python) overview
Introduction
Setting up a development environment
Tutorial: The Local Library website
Tutorial Part 2: Creating a skeleton website
Tutorial Part 3: Using models
Tutorial Part 4: Django admin site
Tutorial Part 5: Creating our home page
Tutorial Part 6: Generic list and detail views
Tutorial Part 7: Sessions framework
Tutorial Part 8: User authentication and permissions
Tutorial Part 9: Working with forms
Tutorial Part 10: Testing a Django web application
Tutorial Part 11: Deploying Django to production
Web application security
Assessment: DIY mini blog
Express Web Framework (node.js/JavaScript) 
Express Web Framework (Node.js/JavaScript) overview
Express/Node introduction
Setting up a Node (Express) development environment
Express tutorial: The Local Library website
Express Tutorial Part 2: Creating a skeleton website
Express Tutorial Part 3: Using a database (with Mongoose)
Express Tutorial Part 4: Routes and controllers
Express Tutorial Part 5: Displaying library data
Express Tutorial Part 6: Working with forms
Express Tutorial Part 7: Deploying to production
Further resources
Common questions 
HTML questions
CSS questions
JavaScript questions
How the Web works
Tools and setup
Design and accessibility
How to contribute
Learn the best of web development
Get the latest and greatest from MDN delivered straight to your inbox.
E-mail

Sign up now
Hide Newsletter Sign-up

MDN Web Docs
Web Technologies
Learn Web Development
About MDN
Feedback

Mozilla
About
Contact Us
Firefox

TermsPrivacyCookies
© 2005-2019 Mozilla and individual contributors.Content is available under these licenses.Skip to main content
Select language
Skip to search

Technologies▼
References & Guides▼
Feedback▼

Search MDN

Sign in
Express web framework (Node.js/JavaScript)
Learn web developmentServer-side website programmingExpress web framework (Node.js/JavaScript)
English
▼
On this Page
Prerequisites
Guides
See also
Adding more tutorials
Express is a popular unopinionated web framework, written in JavaScript and hosted within the Node.js runtime environment. The module explains some of the key benefits of this framework, how to set up your development environment and how to perform common web development and deployment tasks.
Prerequisites
Before starting this module you will need to understand what server-side web programming and web frameworks are, ideally by reading the topics in our Server-side website programming first steps module. A general knowledge of programming concepts and JavaScript is highly recommended, but not essential to understanding the core concepts.
Note: This website has many useful resources for learning JavaScript in the context of client-side development: JavaScript, JavaScript Guide, JavaScript Basics, JavaScript (learning). The core JavaScript language and concepts are the same for server-side development on Node.js and this material will be relevant. Node.js offers additional APIs for supporting functionality that is useful in browserless environments (e.g., to create HTTP servers and access the file system but does not support JavaScript APIs for working with the browser and DOM).
This guide will provide some information about working with Node.js and Express, and there are numerous other excellent resources on the Internet and in books — some of these linked from How do I get started with Node.js (StackOverflow) and What are the best resources for learning Node.js? (Quora).
Guides
Express/Node introduction
In this first Express article we answer the questions "What is Node?" and "What is Express?" and give you an overview of what makes the Express web framework special. We'll outline the main features and show you some of the main building blocks of an Express application (although at this point you won't yet have a development environment in which to test it).
Setting up a Node (Express) development environment
Now that you know what Express is for, we'll show you how to set up and test a Node/Express development environment on Windows, Linux (Ubuntu), and Mac OS X. Whatever common operating system you are using, this article should give you what you need to be able to start developing Express apps.
Express Tutorial: The Local Library website
The first article in our practical tutorial series explains what you'll learn and provides an overview of the "local library" example website we'll be working through and evolving in subsequent articles.
Express Tutorial Part 2: Creating a skeleton website
This article shows how you can create a "skeleton" website project, which you can then go on to populate with site-specific routes, templates/views, and databases.
Express Tutorial Part 3: Using a Database (with Mongoose)
This article briefly introduces databases for Node/Express. It then goes on to show how we can use Mongoose to provide database access for the LocalLibrary website. It explains how object schema and models are declared, the main field types, and basic validation. It also briefly shows a few of the main ways you can access model data.
Express Tutorial Part 4: Routes and controllers
In this tutorial we'll set up routes (URL handling code) with "dummy" handler functions for all the resource endpoints that we'll eventually need in the LocalLibrary website. On completion, we'll have a modular structure for our route handling code, that we can extend with real handler functions in the following articles. We'll also have a really good understanding of how to create modular routes using Express.
Express Tutorial Part 5: Displaying library data
We're now ready to add the pages that display the LocalLibrary website books and other data. The pages will include a home page that shows how many records we have of each model type and list and detail pages for all of our models. Along the way, we'll gain practical experience in getting records from the database and using templates.
Express Tutorial Part 6: Working with forms
In this tutorial we'll show you how to work with HTML Forms in Express, using Pug, and in particular how to write forms to create, update, and delete documents from the database.
Express Tutorial Part 7: Deploying to production
Now you've created an awesome LocalLibrary website, you're going to want to install it on a public web server so that it can be accessed by library staff and members over the Internet. This article provides an overview of how you might go about finding a host to deploy your website, and what you need to do in order to get your site ready for production.
See also
Installing LocalLibrary on PWS/Cloud Foundry
This article provides a practical demonstration of how to install LocalLibrary on the Pivotal Web Services PaaS cloud — this is a full-featured, open source alternative to Heroku, the PaaS cloud service used in Part 7 of the tutorial, listed above. PWS/Cloud Foundry is definitely worth checking out if you are looking for an alternative to Heroku (or another PaaS cloud service), or simply feel like trying something different. 
Adding more tutorials
That's the end of the tutorial articles (for now). If you would like to extend it, other interesting topics to cover are:
Using sessions.
User authentication.
User authorization and permissions.
Testing an Express web application.
Web security for Express web applications.
And of course, it would be excellent to have an assessment task!

Last modified:
Sep 19, 2019, by MDN contributors
Related Topics
Complete beginners start here!
Getting started with the Web 
Getting started with the Web overview
Installing basic software
What will your website look like?
Dealing with files
HTML basics
CSS basics
JavaScript basics
Publishing your website
How the Web works
HTML — Structuring the Web
Introduction to HTML 
Introduction to HTML overview
Getting started with HTML
What's in the head? Metadata in HTML
HTML text fundamentals
Creating hyperlinks
Advanced text formatting
Document and website structure
Debugging HTML
Assessment: Marking up a letter
Assessment: Structuring a page of content
Multimedia and embedding 
Multimedia and embedding overview
Images in HTML
Video and audio content
From object to iframe — other embedding technologies
Adding vector graphics to the Web
Responsive images
Assessment: Mozilla splash page
HTML tables 
HTML tables overview
HTML table basics
HTML Table advanced features and accessibility
Assessment: Structuring planet data
HTML forms 
HTML forms overview
Your first HTML form
How to structure an HTML form
The native form widgets
Sending form data
Form validation
How to build custom form widgets
Sending forms through JavaScript
HTML forms in legacy browsers
Styling HTML forms
Advanced styling for HTML forms
Property compatibility table for form widgets
CSS — Styling the Web
CSS first steps 
CSS first steps overview
What is CSS?
Getting started with CSS
How CSS is structured
How CSS works
Using your new knowledge
CSS building blocks 
CSS building blocks overview
Cascade and inheritance
CSS selectors
The box model
Backgrounds and borders
Handling different text directions
Overflowing content
Values and units
Sizing items in CSS
Images, media, and form elements
Styling tables
Debugging CSS
Organizing your CSS
Styling text 
Styling text overview
Fundamental text and font styling
Styling lists
Styling links
Web fonts
Assessment: Typesetting a community school homepage
CSS layout 
CSS layout overview
Introduction
Normal Flow
Flexbox
Grids
Floats
Positioning
Multiple-column Layout
Responsive design
Beginner's guide to media queries
Legacy Layout Methods
Supporting Older Browsers
Fundamental Layout Comprehension
JavaScript — Dynamic client-side scripting
JavaScript first steps 
JavaScript first steps overview
What is JavaScript?
A first splash into JavaScript
What went wrong? Troubleshooting JavaScript
Storing the information you need — Variables
Basic math in JavaScript — Numbers and operators
Handling text — Strings in JavaScript
Useful string methods
Arrays
Assessment: Silly story generator
JavaScript building blocks 
JavaScript building blocks overview
Making decisions in your code — Conditionals
Looping code
Functions — Reusable blocks of code
Build your own function
Function return values
Introduction to events
Assessment: Image gallery
Introducing JavaScript objects 
Introducing JavaScript objects overview
Object basics
Object-oriented JavaScript for beginners
Object prototypes
Inheritance in JavaScript
Working with JSON data
Object building practice
Assessment: Adding features to our bouncing balls demo
Asynchronous JavaScript 
Asynchronous JavaScript overview
General asynchronous programming concepts
Introducing asynchronous JavaScript
Cooperative asynchronous Java​Script: Timeouts and intervals
Graceful asynchronous programming with Promises
Making asynchronous programming easier with async and await
Choosing the right approach
Client-side web APIs 
Client-side web APIs
Introduction to web APIs
Manipulating documents
Fetching data from the server
Third party APIs
Drawing graphics
Video and audio APIs
Client-side storage
Accessibility — Make the web usable by everyone
Accessibility guides 
Accessibility overview
What is accessibility?
HTML: A good basis for accessibility
CSS and JavaScript accessibility best practices
WAI-ARIA basics
Accessible multimedia
Mobile accessibility
Accessibility assessment 
Assessment: Accessibility troubleshooting
Tools and testing
Cross browser testing 
Cross browser testing overview
Introduction to cross browser testing
Strategies for carrying out testing
Handling common HTML and CSS problems
Handling common JavaScript problems
Handling common accessibility problems
Implementing feature detection
Introduction to automated testing
Setting up your own test automation environment
Server-side website programming
First steps 
First steps overview
Introduction to the server-side
Client-Server overview
Server-side web frameworks
Website security
Django web framework (Python) 
Django web framework (Python) overview
Introduction
Setting up a development environment
Tutorial: The Local Library website
Tutorial Part 2: Creating a skeleton website
Tutorial Part 3: Using models
Tutorial Part 4: Django admin site
Tutorial Part 5: Creating our home page
Tutorial Part 6: Generic list and detail views
Tutorial Part 7: Sessions framework
Tutorial Part 8: User authentication and permissions
Tutorial Part 9: Working with forms
Tutorial Part 10: Testing a Django web application
Tutorial Part 11: Deploying Django to production
Web application security
Assessment: DIY mini blog
Express Web Framework (node.js/JavaScript) 
Express Web Framework (Node.js/JavaScript) overview
Express/Node introduction
Setting up a Node (Express) development environment
Express tutorial: The Local Library website
Express Tutorial Part 2: Creating a skeleton website
Express Tutorial Part 3: Using a database (with Mongoose)
Express Tutorial Part 4: Routes and controllers
Express Tutorial Part 5: Displaying library data
Express Tutorial Part 6: Working with forms
Express Tutorial Part 7: Deploying to production
Further resources
Common questions 
HTML questions
CSS questions
JavaScript questions
How the Web works
Tools and setup
Design and accessibility
How to contribute
Learn the best of web development
Get the latest and greatest from MDN delivered straight to your inbox.
E-mail

Sign up now
Hide Newsletter Sign-up

MDN Web Docs
Web Technologies
Learn Web Development
About MDN
Feedback

Mozilla
About
Contact Us
Firefox

TermsPrivacyCookies
© 2005-2019 Mozilla and individual contributors.Content is available under these licenses.